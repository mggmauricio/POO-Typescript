interface PromptValidator<T = string | string[] | boolean> {
    validate: (input: T) => boolean;
    error: (input: T) => string;
}
declare function required<T = string | string[] | boolean>(): PromptValidator<T>;

declare class PromptAgent<T = string> {
    #private;
    /**
     * The prompts answers queue.
     * When not empty, any prompt will be answered by the first answer in this list.
     */
    nextAnswers: T[];
    static agent<T>(): PromptAgent<T>;
    constructor(instancier: symbol);
    /**
     * Programmatically set the next answer for any prompt (`question()`, `confirm()`, `select()`)
     *
     * This is useful for testing.
     *
     * @example
     * ```js
     * const promptAgent = PromptAgent.agent();
     * promptAgent.nextAnswer("toto");
     *
     * const input = await question("what is your name?");
     * assert.equal(input, "toto");
     * ```
     */
    nextAnswer(value: T): void;
}

type Stdin = NodeJS.ReadStream & {
    fd: 0;
};
type Stdout = NodeJS.WriteStream & {
    fd: 1;
};
interface AbstractPromptOptions {
    stdin?: Stdin;
    stdout?: Stdout;
    message: string;
    signal?: AbortSignal;
}

interface Choice<T = any> {
    value: T;
    label: string;
    description?: string;
}

interface QuestionOptions extends AbstractPromptOptions {
    defaultValue?: string;
    validators?: PromptValidator[];
    secure?: boolean;
}

interface ConfirmOptions extends AbstractPromptOptions {
    initial?: boolean;
}

interface MultiselectOptions extends AbstractPromptOptions {
    choices: (Choice | string)[];
    maxVisible?: number;
    preSelectedChoices?: (Choice | string)[];
    validators?: PromptValidator[];
    autocomplete?: boolean;
    caseSensitive?: boolean;
    showHint?: boolean;
}

interface SelectOptions extends AbstractPromptOptions {
    choices: (Choice | string)[];
    maxVisible?: number;
    ignoreValues?: (string | number | boolean)[];
    validators?: PromptValidator[];
    autocomplete?: boolean;
    caseSensitive?: boolean;
}

declare function question(message: string, options?: Omit<QuestionOptions, "message">): Promise<string>;
declare function select(message: string, options: Omit<SelectOptions, "message">): Promise<string>;
declare function confirm(message: string, options: Omit<ConfirmOptions, "message">): Promise<boolean>;
declare function multiselect(message: string, options: Omit<MultiselectOptions, "message">): Promise<string[]>;

export { type AbstractPromptOptions, type Choice, type ConfirmOptions, type MultiselectOptions, PromptAgent, type PromptValidator, type QuestionOptions, type SelectOptions, confirm, multiselect, question, required, select };
